schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type AuthPayload {
  token: String
  user: User
}

type Mutation {
  login(aliasUUID: String, email: String!, password: String!): AuthPayload!
}

type Query {
  hello: String!
}

type Subscription {
  "Returns a random number every second"
  counter(limit: Int): Int!
  "Returns a random number every second, errors if even"
  counterWithError: Int!
  "Returns stream of errors"
  flowOfErrors: String
  "Returns a single value"
  singleValueSubscription: Int!
  "Returns one value then an error"
  singleValueThenError: Int!
}

type User {
  email: String!
  firstName: String
  intThatNeverComes: Int!
  isAdmin: Boolean!
  lastName: String
  universityId: Int
}
